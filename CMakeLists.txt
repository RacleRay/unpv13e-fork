cmake_minimum_required(VERSION 3.20.0)

# set(CMAKE_CXX_STANDARD 17)
# set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)

# project(my_project_name VERSION 0.0.1 LANGUAGES C CXX)
project(net-snippests VERSION 0.0.1 LANGUAGES C)


if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
    message("Setting default build type to Release")
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	add_compile_definitions(__MY_DEBUG__)
endif()

# =======================================================
# include directoies recursivly.
MACRO(HEADER_DIRECTORIES return_list)
    FILE(GLOB_RECURSE new_list *.h)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
        SET(dir_list ${dir_list} ${dir_path})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()

HEADER_DIRECTORIES(header_dir_list)

list(LENGTH header_dir_list header_dir_list_count)
message(STATUS "[INFO] Found ${header_dir_list_count} header directories.")
# ==========================================================

# include_directories(${PROJECT_SOURCE_DIR}/include/)
include_directories(${header_dir_list})


# # 获取当前目录下的所有目录
# file(GLOB SUBDIRECTORIES LIST_DIRECTORIES true *)

# # 遍历目录集合并添加到项目中。保证目录下有 CMakeLists.txt 文件
# 由于我直接使用 原仓库 中的 Makefile 编译, 只是用 CMake 组织文件, 用于源码阅读
# 所以, 没有花时间区建立 CMakeLists.txt 文件了
# foreach(subdirectory ${SUBDIRECTORIES})
#     if(IS_DIRECTORY ${subdirectory})
#         add_subdirectory(${subdirectory})
#     endif()
# endforeach()

add_subdirectory(./lib)
add_subdirectory(./server)
add_subdirectory(./tcpcliserv)